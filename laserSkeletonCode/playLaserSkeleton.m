function playLaserSkeleton(w, camParams,basePath)

    clearvars -except w iter camParams basePath
%Takes in a 'walk' struct 'w' (as generated by splitwalks) and then plays a
%laser skeleton video (with or without associated video)

%% set up yr bools
recordVid        = true; %Save a recording of the video
showVideo        = true; %Display the video
showRetinalVideo = false; %Show retinal reference frame video

%

useEye = w.eyes;

if recordVid
    
    vidType = [];
    if showRetinalVideo; vidType = [vidType '_ret']; end
    if isempty(vidType); vidType = '_raw'; end
    
    vidFileName = [w.subID '_' w.takeID  '_' num2str(w.ww) '_laserSkeleton' vidType '.mp4'];
    
    videoSavePath = [basePath filesep w.sessionID filesep 'OutputFiles' filesep 'vids' filesep vidFileName];
    
    if ~exist(videoSavePath,'file')
        mkdir([basePath filesep w.sessionID filesep 'OutputFiles'],'vids');
    end
    
end


%%
if recordVid
    vidObj = VideoWriter(videoSavePath,'MPEG-4');
    vidObj.FrameRate = round(mean(diff(w.syncedUnixTime))^-1);
    open(vidObj)
end

shadow_fr_mar_dim = w.shadow_fr_mar_dim;
calibDist = w.calibDist;
comXYZ = w.comXYZ;
camComXYZ(:,1) = smooth(comXYZ(:,1),21);
camComXYZ(:,2) = smooth(comXYZ(:,2),21);
camComXYZ(:,3) = smooth(comXYZ(:,3),21);

if useEye(1)
    rGazeGroundIntersection = w.rGazeGroundIntersection; 
    rGazeXYZ = w.rGazeXYZ;
end
if useEye(2) 
    lGazeGroundIntersection = w.lGazeGroundIntersection; 
    lGazeXYZ = w.lGazeXYZ;
end

if useEye(1), rEyeballCenterXYZ = w.rEyeballCenterXYZ; end
if useEye(2), lEyeballCenterXYZ = w.lEyeballCenterXYZ; end

rHeelXYZ = w.rHeelXYZ;
lHeelXYZ = w.lHeelXYZ;

%%%%remove blinks
if all(useEye), blinks = w.lEye_blinks & w.rEye_blinks;
elseif useEye(1), blinks = w.rEye_blinks;
elseif useEye(2), blinks = w.lEye_blinks; 
end

if useEye(1), rGazeXYZ(blinks,:) = nan; end
if useEye(2), lGazeXYZ(blinks,:) = nan; end

headVecX_fr_xyz = w.headVecX_fr_xyz;
headVecY_fr_xyz = w.headVecY_fr_xyz;
headVecZ_fr_xyz = w.headVecZ_fr_xyz;

subID = w.subID;
sessionID = w.sessionID;
takeID = w.takeID;

shadowVersion = w.shadowVersion;

worldFrameIndex = w.worldFrameIndex; %the frame from the world video that most closely matches the current skel/eye frame

if ~w.isThisVORCalibrationData
    steps_HS_TO_StanceLeg_XYZ = w.steps_HS_TO_StanceLeg_XYZ;
else
    steps_HS_TO_StanceLeg_XYZ =[nan nan nan nan nan nan];
end

stepHS_worldFr = worldFrameIndex(steps_HS_TO_StanceLeg_XYZ(:,1));

%% %%% find frame in eye videos that corresponds to each world frame
disp('find frame in eye videos that corresponds to each world frame')

pupilFolderPath = [basePath filesep w.sessionID filesep w.takeID filesep 'Pupil'];

if useEye(1), e0timestamps    = readNPY([pupilFolderPath filesep 'eye0_timestamps.npy']); end
if useEye(2), e1timestamps    = readNPY([pupilFolderPath filesep  'eye1_timestamps.npy']); end
worldTimestamps = readNPY([pupilFolderPath filesep  'world_timestamps.npy']);

if useEye(1), eye0index = nan(size(worldTimestamps)); end
if useEye(2), eye1index = nan(size(worldTimestamps)); end

%%%% do some kinda cracked out nonsense to find the eye video
%%%% frames to play on each iteration of the loop. This part is
%%%% weird because I didn't do the work to sync the eye video
%%%% timestamps to the synced data (and I don't have those
%%%% timestamps converted to unix time
if useEye(1)
eye0index = knnsearch(e0timestamps,worldTimestamps(w.worldFrameIndex)); %find timetamps in eye0vid that correspond to the worldVid frames
eye0index = round(linspace(eye0index(1),eye0index(end),numel(w.frames))); %resample frame indices to utilize (closer to) full 120Hz of the eye cam
end

if useEye(2)
eye1index = knnsearch(e1timestamps,worldTimestamps(w.worldFrameIndex));
eye1index = round(linspace(eye1index(1),eye1index(end),numel(w.frames))); %resample frame indices to utilize (closer to) full 120Hz of the eye cam
end
%% set up videos
if showVideo
    
    worldVidObj = cv.VideoCapture([pupilFolderPath filesep 'world.mp4']);
    eye0VidObj  = cv.VideoCapture([pupilFolderPath filesep 'eye0.mp4']);
    eye1VidObj  = cv.VideoCapture([pupilFolderPath filesep 'eye1.mp4']);
    
%     assert(worldVidObj.isOpened() && eye0VidObj.isOpened() && eye1VidObj.isOpened(), 'One of the pupil vids didnt load')
    
    %%%set up video objects to start reading from the correct frame
    framePropID = 1; %this is the index of the "PosFrames" property of mexopencv's video objects. Use to set frame#
    
    worldVidObj.set(framePropID, w.worldFrameIndex(1)); %set eye videos to the correct start frame
    if useEye(1), eye0VidObj.set(framePropID,  eye0index(1)); end %set eye videos to the correct start frame
    if useEye(2), eye1VidObj.set(framePropID,  eye1index(1)); end %ditto
end
%%
thisFrameRaw = worldVidObj.read();

height = size(thisFrameRaw,1);
width = size(thisFrameRaw,2);

if height==1080 && width==1920
    pxPerDeg = 18.33;
else
    error(' pxPerDeg is unknown for this resolution')
end

porX = w.gaze_norm_pos_x * width;
porY = height - w.gaze_norm_pos_y * height; %gotta do this weirdness to porY b/c of image vs XY coordinates

time = w.syncedUnixTime -  w.syncedUnixTime(1);

porY(isnan(porY)) = 0;
porX(isnan(porX)) = 0;

porXdisp = porX - nanmean(porX);
porYdisp = ((-porY)-nanmean(-porY)); %do some flippidoo nonsense to porY to make the trace look right (e.g. "downward saccades" correspond to the pupil moving downward)
porXdisp = porXdisp./pxPerDeg;
porYdisp = porYdisp./pxPerDeg;

porXdisp = smooth(porXdisp,3);
porYdisp = smooth(porYdisp,3);

%% %%% make sphere thingy fr eyeball guys
sphRes = 20;
r = 35;%mean(rEye.sphere_radius); %p.s. it's 12mm, but let's blow 'em up a bit for ... visibilitiy... 8D
[th, phi] = meshgrid(linspace(0, 2*pi, sphRes), linspace(-pi, pi, sphRes));
[x1,y1,z1] = sph2cart(th, phi, r);

normScale = calibDist;
plotSkel = true;

if shadowVersion == 2
    lLeg = [2 3 4 5 6 7 5];
    rLeg = [2 8 9 10 11 12 10];
    tors = [2 13 14 15 26 27 28];
    lArm = [15 16 17 26 17 18 19 20];
    rArm = [15 21 22 26 22 23 24 25];
numMarkers = 28;
elseif shadowVersion == 3    
    lLeg = [2 9 10 11 14 12 13 12 11];
    rLeg = [2 3 4  5  8  6  7  6  5];
    tors = [2 15 16 17 30 31 32];
    lArm = [17 24 25 30 25 26 27 28 29];
    rArm = [17 18 19 30 19 20 21 22 23];
    numMarkers = 32;
end

comXYZ = squeeze(shadow_fr_mar_dim(:,1,:));


frames = 1:1:length(comXYZ);

% plot (hypothetical) groundplane

xSpan = [min(rGazeGroundIntersection(frames,1))-5000, max(rGazeGroundIntersection(frames,1))+5000];
zSpan = [min(rGazeGroundIntersection(frames,3))-5000, max(rGazeGroundIntersection(frames,3))+5000];


res      = 100; % resultion for the meshgrid
[groundPlane_x, groundPlane_z] = meshgrid(xSpan(1):res:xSpan(2), zSpan(1):res:zSpan(2));


groundPlane_y = ones(size(groundPlane_x));
groundPlane_color = ones(size(groundPlane_x));



close all
figure(1254);clf
f = gcf;
% f.Position = [1 41 1920 962];
f.Units = 'normalized';
f.Position = [0 0 1 1];

t = [];

    porWindow = 500; %the window of frames we'll use for the eye traces (i.e. the plot will show frame +/- porWindow)


for fr = frames

    if fr > 5000
        break
    end
    
    
    worldFr = worldFrameIndex(fr); %the frame in World.mp4 (30Hz) that corresponds to this 120Hz frame
    tic
    
    disp(strcat({'Fr#'},num2str(fr),{'-PROGRESS: '}, num2str(fr),'-of-',num2str(frames(end)),...
        '- time remaining ~',num2str((nanmean(t) * (length(frames)))/60 ),'mins - Mean Frame Dur ~',num2str(nanmean(t)),...
        '- RecordVidset to:',num2str(recordVid)))
    
    
    clf
    
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%% Plot Laser Skeleton
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    skel1 = axes('Position',[0, 1/3, .5 2/3]);
    
    %%eyeball centers in shadow coordinats(not to be confused with "rEye_sphCen_x", which are in pupil camera coords)
    if useEye(1)
    rEx = rEyeballCenterXYZ(fr,1);
    rEy = rEyeballCenterXYZ(fr,2);
    rEz = rEyeballCenterXYZ(fr,3);
    end
    
    if useEye(2)
    lEx = lEyeballCenterXYZ(fr,1);
    lEy = lEyeballCenterXYZ(fr,2);
    lEz = lEyeballCenterXYZ(fr,3);
    end
    
    grHeight(fr) = min([rHeelXYZ(fr,2) lHeelXYZ(fr,2) ]);
    
    % right eye
    
    if useEye(1)
    r1 =  mesh(x1+rEx, y1+rEy, z1+rEz);
    r1.FaceColor = [1 .9 .9];
    r1.EdgeColor = 'k';
    r1.EdgeAlpha = 0.1;
    hold on
    
    
    if all(useEye), meanGaze = nanmean([lGazeXYZ(fr,:); rGazeXYZ(fr,:)]);
    elseif useEye(1),  meanGaze = rGazeXYZ(fr,:);
    elseif useEye(2), meanGaze = lGazeXYZ(fr,:); end
        
        
    if all(useEye), meanGazeGround = nanmean([lGazeGroundIntersection(fr,:); rGazeGroundIntersection(fr,:)]);
    elseif useEye(1), meanGazeGround =rGazeGroundIntersection(fr,:);
    elseif useEye(2), meanGazeGround =lGazeGroundIntersection(fr,:); end
        
%     plot3([rEx meanGazeGround(1)],...
%         [rEy meanGazeGround(2)],...
%         [rEz meanGazeGround(3)], 'm-','LineWidth',2)
%     
%     plot3(meanGazeGround(1),...
%         meanGazeGround(2),...
%         meanGazeGround(3),'kp','MarkerFaceColor','g','MarkerSize',12)
    
    
    plot3([rEx rGazeGroundIntersection(fr,1)],...
        [rEy rGazeGroundIntersection(fr,2)],...
        [rEz rGazeGroundIntersection(fr,3)], 'm-','LineWidth',2)
    
    plot3(rGazeGroundIntersection(fr,1),...
        rGazeGroundIntersection(fr,2),...
        rGazeGroundIntersection(fr,3),'kp','MarkerFaceColor','g','MarkerSize',12)
    
    
    end
    
    if useEye(2)
    % left eye
    l1 =  mesh(x1+lEx, y1+lEy, z1+lEz);
    l1.FaceColor = [.9 .9 1];
    l1.EdgeColor = 'none';
    
    hold on
    
    
    plot3([lEx lGazeGroundIntersection(fr,1)],...
        [lEy lGazeGroundIntersection(fr,2)],...
        [lEz lGazeGroundIntersection(fr,3)], 'c-','LineWidth',2)
    
    plot3(lGazeGroundIntersection(fr,1),...
        lGazeGroundIntersection(fr,2),...
        lGazeGroundIntersection(fr,3),'kp','MarkerFaceColor','g','MarkerSize',12)
    
    end
    
    if plotSkel
        %%%Plotcherself up a nice little skeleetoon friend
        plot3(shadow_fr_mar_dim(fr,1:numMarkers,1),shadow_fr_mar_dim(fr,1:numMarkers,2),shadow_fr_mar_dim(fr,1:numMarkers,3),'ko','MarkerFaceColor','k','MarkerSize',8)
        hold on
        
        
        plot3(shadow_fr_mar_dim(fr,lLeg,1),shadow_fr_mar_dim(fr,lLeg,2),shadow_fr_mar_dim(fr,lLeg,3),'c','LineWidth',4)
        plot3(shadow_fr_mar_dim(fr,rLeg,1),shadow_fr_mar_dim(fr,rLeg,2),shadow_fr_mar_dim(fr,rLeg,3),'r','LineWidth',4)
        plot3(shadow_fr_mar_dim(fr,tors,1),shadow_fr_mar_dim(fr,tors,2),shadow_fr_mar_dim(fr,tors,3),'g','LineWidth',4)
        plot3(shadow_fr_mar_dim(fr,lArm,1),shadow_fr_mar_dim(fr,lArm,2),shadow_fr_mar_dim(fr,lArm,3),'c','LineWidth',4)
        plot3(shadow_fr_mar_dim(fr,rArm,1),shadow_fr_mar_dim(fr,rArm,2),shadow_fr_mar_dim(fr,rArm,3),'r','LineWidth',4)
        

        bx =   shadow_fr_mar_dim(fr,1,1);
        by =   shadow_fr_mar_dim(fr,1,2);
        bz =   shadow_fr_mar_dim(fr,1,3);
        
        %%% plot foothold locations
        rFootholds = steps_HS_TO_StanceLeg_XYZ(steps_HS_TO_StanceLeg_XYZ(:,3) == 1 ,:);
        lFootholds = steps_HS_TO_StanceLeg_XYZ(steps_HS_TO_StanceLeg_XYZ(:,3) == 2 ,:);
        
        rFootholds(rFootholds(:,1)<fr-2000 | rFootholds(:,1)>fr+2000,:) = [];
        lFootholds(lFootholds(:,1)<fr-2000 | lFootholds(:,1)>fr+2000,:) = [];
        
        %   plot vertical projection of foothold locations onto groundplane
        
        plot3(rFootholds(:,4), ones(length(rFootholds(:,1)))*grHeight(fr), rFootholds(:,6),'ko','MarkerSize', 12, 'MarkerFaceColor','r')
        plot3(lFootholds(:,4), ones(length(lFootholds(:,1)))*grHeight(fr), lFootholds(:,6),'ko','MarkerSize', 12, 'MarkerFaceColor','c')
        
        
        %plot gaussianly burnt groundplane
        sigma = 7500;
        gaussian        = 1./sqrt(2*pi*sigma).*exp(-1./(2*sigma).*( (groundPlane_z-meanGazeGround(3)).^2 + (groundPlane_x-meanGazeGround(1)).^2));
        gaussianNorm    = gaussian ./ max(max(gaussian));
        
        if ~isnan(gaussianNorm)
            groundPlane_color = groundPlane_color + gaussianNorm; %add 2d gaussian for this frame's gaze/ground intersection ground plane
        end
        
        %         g_x = meshgrid(-10e4:500:10e4) + comXYZ(ii,1);
        %         g_y = ones(size(g_x)) * min([rHeelXYZ(ii,2) lHeelXYZ(ii,2) ]);
        %         g_z = meshgrid(-10e4:500:10e4)' + comXYZ(ii,3);
        
        s1 = surface(groundPlane_x , groundPlane_y*grHeight(fr), groundPlane_z, groundPlane_color  );
        s1.LineStyle = 'none';
        s1.FaceColor = 'interp';
        
        %         CT = cbrewer('div', 'Spectral', 64);
        %         colormap(flipud(CT));
        colormap jet
        caxis([0 40])
        
    end
    %     view(-173, -43);
    axis equal
    title(num2str(fr))
    %     set(gca,'CameraUpVector',[0 1 0])
    xlabel('x');ylabel('y'); zlabel('z');
    %     axis([-5000+bx 5000+bx -5000+by 5000+by -5000+bz 5000+bz])
    
    a = gca;
    a.CameraTarget = [camComXYZ(fr,1), camComXYZ(fr,2), camComXYZ(fr,3)]; %point figure 'camera' at COM
    a.CameraPosition = a.CameraTarget + [-1800 1800 2000]; %set camera position
    a.CameraViewAngle = 80;
    a.CameraUpVector = [ 0 1 0];
    hold off
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%% Plot (nearest) frame from World Camera
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    world1 = axes('Position',[.44 .33 .55 .7]);
    
    worldVidObj.set(framePropID, worldFr-1); %set eye videos to the correct start frame
    thisFrameRaw = worldVidObj.read;
    thisFrameRaw = undistortImage(thisFrameRaw, camParams);
    imshow(thisFrameRaw)
    hold on
    
    eyepos = undistortPoints([porX(fr) porY(fr)],camParams);
    
    plot([eyepos(1) eyepos(1)], [0 height],'-k', 'LineWidth',2)
    plot([0 width], [eyepos(2) eyepos(2)], '-k', 'LineWidth',2)
    viscircles([eyepos(1) eyepos(2)],pxPerDeg,'Color','k','EnhanceVisibility',false);
    
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%%% show eyeballs  -> O_0 <-
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
    if useEye(1), eye0VidObj.set(1,eye0index(fr)-1); end %set eye video to necessary frame. This is inefficient, but whatevs
    if useEye(2), eye1VidObj.set(1,eye1index(fr)-1); end
    
    if useEye(1), 
        imEye0 = eye0VidObj.read(); 
        
        eyeWidth = size(imEye0,2);
        eyeHeight = size(imEye0,1);
        ey0ax = axes;
        ey0ax.Position = [0.80    0.022    0.16   0.2497];
        
        axis off
        imshow(flipud(imEye0))
    
    end %right eye ->O_o
    
    if useEye(2), 
        imEye1 = eye1VidObj.read(); 
        eyeWidth = size(imEye1,2);
        eyeHeight = size(imEye1,1);
        ey1ax = axes;
        ey1ax.Position = [0.04400    0.022    0.16   0.2497];

        axis off
        
        imshow(fliplr(imEye1))
    
    end % left eye o_O<-
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%% Plot POR/gaze traces
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    gzXAx = axes('Position',[0.2222 0.1307 0.5549 0.0805]);
    box on
    
    plot(time, porXdisp,'ro-','LineWidth',1,'MarkerSize',1.5);
    hold on
    
    plot( time([ fr fr]), [1000 -1000],'k-','LineWidth',2)
    
    plot(time(fr), porXdisp(fr),'ko','MarkerFaceColor','w');
    
    
    ttmp = time([max([1 fr-porWindow])]);
    xlim([ttmp, ttmp+2*porWindow*1/120]);
    

        ylim([-30 30]);
        set(gca, 'YTick', [-20,0,20]);
    
    hold on
    
    grid on
    
    
    gzXlab1 = text(ttmp+porWindow*1/120- .6,26,'Horizontal Position');
    gzXlab1.FontSize = 16;
    gzXlab1.Color = 'k';
    gzXlab1.FontWeight = 'bold';
    
    gzXAx.YLabel.String = 'Degrees';
    
    gzYAx = axes('Position',[0.2222 0.0494 0.5549 0.0805]);
    box on
    
    plot(time, porYdisp,'bo-','LineWidth',1,'MarkerSize',1.5);
    hold on
    
    plot( time([ fr fr]), [1000 -1000],'k-','LineWidth',2)
    
    plot(time(fr), porYdisp(fr),'ko','MarkerFaceColor','w');

    ttmp = time([max([1 fr-porWindow])]);
    xlim([ttmp, ttmp+2*porWindow*1/120]);
    

        ylim([-30 30]);
        set(gca, 'YTick', [-20,0,20]);
    
    
    hold on
    
    grid on
    
    gzXlab1 = text(ttmp+porWindow*1/120-.6,26,'Vertical Position');
    gzXlab1.FontSize = 16;
    gzXlab1.Color = 'k';
    gzXlab1.FontWeight = 'bold';
    
    gzYAx.XLabel.String = 'Time (sec)';
    gzYAx.YLabel.String = 'Degrees';

    
    drawnow
    
    if recordVid
        thisFrame = getframe(gcf);
        writeVideo(vidObj,thisFrame);
        
    end
    
    t(fr-frames(1)+1) = toc;
end

%%
if recordVid
    close(vidObj)
end
