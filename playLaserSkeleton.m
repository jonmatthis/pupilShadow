function playLaserSkeleton(w)

for iter = 1:4
    clearvars -except w iter
    %Takes in a 'walk' struct 'w' (as generated by splitwalks) and then plays a
    %laser skeleton video (with or without associated video)
    
    %% set up yr bools
    recordVid        = true; %Save a recording of the video
    showVideo        = true; %Display the video
    showRetinalVideo = true; %Show retinal reference frame video
    
    % vidType = 'Raw'; % show raw video w/o optic flow
    % vidType = 'FlowVec'; % show raw video optic flow vectors
    % vidType = 'FlowStream'; % show raw video optic flow streamlines
    % vidType = 'FlowBoth'; % show raw video optic flow streamlines & vector field
    % vidType = 'DivCurl'; % show raw video divergence and curl subpanels
 
    switch iter
        case 1
            vidType = 'Raw'; % show raw video w/o optic flow
        case 2
            vidType = 'FlowVec'; % show raw video w/o optic flow
        case 3
            vidType = 'FlowStream'; % show raw video w/o optic flow
        case 4
            vidType = 'FlowBoth'; % show raw video w/o optic flow
    end
    
    
    switch vidType
        
        case 'Raw'
            showOpticFlow    = false; %show optic flow data (Vector field)
            showStreamlines    = false; %show streamlines (integral curves)
            
        case 'FlowVec'
            showOpticFlow    = true; %show optic flow data (Vector field)
            showStreamlines    = false; %show streamlines (integral curves)
            
        case 'FlowStream'
            showOpticFlow    = false; %show optic flow data (Vector field)
            showStreamlines    = true; %show streamlines (integral curves)
            
        case 'FlowBoth'
            showOpticFlow    = true; %show optic flow data (Vector field)
            showStreamlines    = true; %show streamlines (integral curves)
    end
    
    %
    
    %% set up yr paths
    if isunix
        [ret, name] = system('hostname');
        name = name(1:end-1);
        name = string(name);
    elseif ispc || ismac
        name = getenv('computername');
    end
    
    switch name
        case 'MATHISPCWIN10' %Jon's desktop PC
            repoPath = 'D:\Dropbox\ResearchProjects\pupilShadow';
            basePath = 'D:\Dropbox\ResearchProjects\OpticFlowProject\Data';
            addpath(genpath('D:\Dropbox\ResearchProjects\toolboxes')); %add necessary toolboxes to path
        case 'DESKTOP-L29LOMC' %Jon's windows laptop
            repoPath ='C:\Users\jon\Dropbox\ResearchProjects\pupilShadow';
            basePath = 'C:\Users\jon\Dropbox\ResearchProjects\OpticFlowProject\Data';
            addpath(genpath('C:\Users\jon\Dropbox\ResearchProjects\toolboxes')); %add necessary toolboxes to path
        case 'karl-G551JW'
            assert(exist('/home/karl/mexopencv', 'dir')==7, 'Laser skeletons require MexOpenCV to function')
            addpath('/home/karl/mexopencv/')
            addpath('/home/karl/mexopencv/opencv_contrib/')
            
    end
    
    if recordVid
        
        
        if strcmp(w.trialType, 'Rocks')
            vidFileName = [w.subID '_' w.takeID '_' num2str(w.ww) '_LaserSkeleton_' vidType '.mp4'];
        else
            vidFileName = [w.subID '_' w.takeID '_' num2str(w.ww) '_' w.trialType '_LaserSkeleton_' vidType .mp4'];
        end
        
        videoSavePath = [basePath filesep w.sessionID filesep 'OutputFiles' filesep 'vids' filesep vidFileName];
    end
    
    
    %% set up hdf5 file (which is packed full of optic flow .flo files)
    floH5filename = [w.subID '_' w.takeID '_flo.hdf5'];
    
    switch getenv('computername')
        case 'MATHISPCWIN10'
            flowH5path = ['F:/opticFlowFloFiles' filesep w.subID filesep  floH5filename];
        case 'DESKTOP-L29LOMC'
            flowH5path = ['D:/opticFlowFloFiles' filesep w.subID filesep  floH5filename];
    end
    
    
    flowStatsPath = [basePath filesep w.sessionID filesep 'OutputFiles' filesep w.sessionID '_' w.takeID '_OpticFlowData.mat' ];
    
    load(flowStatsPath, 'FOExy','flowMagHistCounts', 'flowMagHistEdges', 'flowMagMean', 'flowMagMedian', 'flowMagStd', 'flowOrEdges', 'flowOrHistCounts', 'flowOrMean', 'flowOrMedian', 'flowOrStd')
    
    
    flowMagMean(1) = 0; %first frame is a nan, which borks up 'smooth'
    flowMagMean = smooth(flowMagMean);
    %% add folder containing "findFOE_rgb" to path if 'showStreamlines' is selected
    
    switch getenv('computername')
        case 'MATHISPCWIN10'
            addpath('D:\Dropbox\ResearchProjects\OpticFlowProject\Analyses')
        case 'DESKTOP-L29LOMC'
            addpath('C:\Dropbox\ResearchProjects\OpticFlowProject\Analyses')
    end
    
    %%
    if recordVid
        vidObj = VideoWriter(videoSavePath,'MPEG-4');
        
        vidObj.FrameRate = round(mean(diff(w.syncedUnixTime))^-1);
        
        
        open(vidObj)
    end
    
    grHeight = fillmissing(w.rGazeGroundIntersection(:,2),'nearest'); %use this height to pin skeleton to zero-height ground plane
    
    
    shadow_fr_mar_dim = w.shadow_fr_mar_dim;
    calibDist = w.calibDist;
    comXYZ = w.comXYZ;
    comXYZ(:,2) = comXYZ(:,2) - grHeight;
    
    hCenXYZ = w.hCenXYZ;
    
    camComXYZ(:,1) = smooth(comXYZ(:,1),21);
    camComXYZ(:,2) = smooth(comXYZ(:,2),21);
    camComXYZ(:,3) = smooth(comXYZ(:,3),21);
    
    rGazeGroundIntersection = w.rGazeGroundIntersection;
    lGazeGroundIntersection = w.lGazeGroundIntersection;
    rGazeGroundIntersection(:,2) = rGazeGroundIntersection(:,2) -grHeight;
    lGazeGroundIntersection(:,2) = lGazeGroundIntersection(:,2) -grHeight;
    
    rEyeballCenterXYZ = w.rEyeballCenterXYZ;
    lEyeballCenterXYZ = w.lEyeballCenterXYZ;
    rEyeballCenterXYZ(:,2) = rEyeballCenterXYZ(:,2)- grHeight;
    lEyeballCenterXYZ(:,2) = lEyeballCenterXYZ(:,2)- grHeight;
    
    eyeXYZ = butterLowZero(4,10,120,rEyeballCenterXYZ);
    eyeVelXYZ = [0 0 0;diff(eyeXYZ)];
    
    rGazeXYZ = w.rGazeXYZ;
    lGazeXYZ = w.lGazeXYZ;
    rGazeXYZ(:,2) = rGazeXYZ(:,2) - grHeight;
    lGazeXYZ(:,2) = lGazeXYZ(:,2) - grHeight;
    
    %%%%remove blinks
    blinks = w.lEye_blinks & w.rEye_blinks;
    rGazeXYZ(blinks,:) = nan;
    lGazeXYZ(blinks,:) = nan;
    
    headVecX_fr_xyz = w.headVecX_fr_xyz;
    headVecY_fr_xyz = w.headVecY_fr_xyz;
    headVecZ_fr_xyz = w.headVecZ_fr_xyz;
    
    subID = w.subID;
    sessionID = w.sessionID;
    takeID = w.takeID;
    
    worldFrameIndex = w.worldFrameIndex; %the frame from the world video that most closely matches the current skel/eye frame
    
    
    if ~w.isThisVORCalibrationData
        steps_HS_TO_StanceLeg_XYZ = w.steps_HS_TO_StanceLeg_XYZ;
    else
        steps_HS_TO_StanceLeg_XYZ =[nan nan nan nan nan nan];
    end
    
    stepHS_worldFr = worldFrameIndex(steps_HS_TO_StanceLeg_XYZ(:,1));
    
    %% pin mr. skeleton to the ground (i.e. make sure grHeight is zero)
    
    
    for mm = 1:length(shadow_fr_mar_dim(1,:,1))
        shadow_fr_mar_dim(:,mm,2) =  shadow_fr_mar_dim(:,mm,2)  - grHeight;
    end
    
    hCenXYZ(:,2) = hCenXYZ(:,2) -grHeight; %also for the headCenter
    %% %%% find frame in eye videos that corresponds to each world frame
    disp('find frame in eye videos that corresponds to each world frame')
    
    pupilFolderPath = [basePath filesep w.sessionID filesep w.takeID filesep 'Pupil'];
    
    e0timestamps    = readNPY([pupilFolderPath filesep 'eye0_timestamps.npy']);
    e1timestamps    = readNPY([pupilFolderPath filesep  'eye1_timestamps.npy']);
    worldTimestamps = readNPY([pupilFolderPath filesep  'world_timestamps.npy']);
    
    eye0index = nan(size(worldTimestamps));
    eye1index = nan(size(worldTimestamps));
    
    %%%% do some kinda cracked out nonsense to find the eye video
    %%%% frames to play on each iteration of the loop. This part is
    %%%% weird because I didn't do the work to sync the eye video
    %%%% timestamps to the synced data (and I don't have those
    %%%% timestamps converted to unix time
    eye0index = knnsearch(e0timestamps,worldTimestamps(w.worldFrameIndex)); %find timetamps in eye0vid that correspond to the worldVid frames
    eye0index = round(linspace(eye0index(1),eye0index(end),numel(w.frames))); %resample frame indices to utilize (closer to) full 120Hz of the eye cam
    
    eye1index = knnsearch(e1timestamps,worldTimestamps(w.worldFrameIndex));
    eye1index = round(linspace(eye1index(1),eye1index(end),numel(w.frames))); %resample frame indices to utilize (closer to) full 120Hz of the eye cam
    %% set up videos
    if showVideo
        
        assert(exist('C:/dev/mexopencv', 'dir')==7, 'Laser skeletons require MexOpenCV to function')
        addpath('C:/dev/mexopencv')
        addpath('C:/dev/mexopencv/opencv_contrib/')
        
        worldVidObj = cv.VideoCapture([pupilFolderPath filesep 'world.mp4']);
        eye0VidObj  = cv.VideoCapture([pupilFolderPath filesep 'eye0.mp4']);
        eye1VidObj  = cv.VideoCapture([pupilFolderPath filesep 'eye1.mp4']);
        
        
        assert(worldVidObj.isOpened() && eye0VidObj.isOpened() && eye1VidObj.isOpened(), 'One of the pupil vids didnt load')
        
        if showRetinalVideo
            retVidFilename = [w.subID '_' w.takeID '_retinalVideo.mp4'];
            retH5Filename = [w.subID '_' w.takeID '_retflow_flo.hdf5'];
            
            switch getenv('computername')
                case 'MATHISPCWIN10'
                    retVidPath = ['F:/opticFlowFloFiles' filesep w.subID filesep 'retinal' filesep  retVidFilename];
                    if showOpticFlow||showStreamlines; retFlowH5path  = ['F:/opticFlowFloFiles' filesep w.subID filesep 'retinal' filesep  retH5Filename];end
                case 'DESKTOP-L29LOMC'
                    retVidPath = ['D:/opticFlowFloFiles' filesep w.subID filesep 'retinal' filesep  retVidFilename];
                    if showOpticFlow||showStreamlines; retFlowH5path  = ['F:/opticFlowFloFiles' filesep w.subID filesep 'retinal' filesep  retH5Filename];end
            end
            
            
            retVidObj = cv.VideoCapture(retVidPath);
            
            assert(retVidObj.isOpened(), 'Retinal frame vid didnt load')
            
            
        end
        
        
    end
    
    %%%set up video objects to start reading from the correct frame
    framePropID = 1; %this is the index of the "PosFrames" property of mexopencv's video objects. Use to set frame#
    
    worldVidObj.set(framePropID, w.worldFrameIndex(1)); %set eye videos to the correct start frame
    eye0VidObj.set(framePropID,  eye0index(1)); %set eye videos to the correct start frame
    eye1VidObj.set(framePropID,  eye1index(1)); %ditto
    
    if showRetinalVideo
        retVidObj.set(framePropID, w.worldFrameIndex(1)); %set eye videos to the correct start frame
        
        retWidth = retVidObj.FrameWidth;
        retHeight = retVidObj.FrameHeight;
        
    end
    
    
    %%
    thisFrameRaw = worldVidObj.read();
    
    if showOpticFlow || showStreamlines
        floH5 = h5read(flowH5path, ['/' num2str(worldFrameIndex(1))]);
        flowRaw = opticalFlow(squeeze(floH5(1,:,:))',squeeze(floH5(2,:,:))'); %use the Vx and Vy channels of the .flo file to make an optical flow object
    end
    
    height = size(thisFrameRaw,1);
    width = size(thisFrameRaw,2);
    
    if height==1080 && width==1920
        pxPerDeg = 18.33;
    else
        error(' pxPerDeg is unknown for this resolution')
    end
    
    porX = w.gaze_norm_pos_x * width;
    porY = height - w.gaze_norm_pos_y * height; %gotta do this weirdness to porY b/c of image vs XY coordinates
    
    time = w.syncedUnixTime -  w.syncedUnixTime(1);
    
    porY(isnan(porY)) = 0;
    porX(isnan(porX)) = 0;
    
    porXdisp = porX - nanmean(porX);
    porYdisp = ((-porY)-nanmean(-porY)); %do some flippidoo nonsense to porY to make the trace look right (e.g. "downward saccades" correspond to the pupil moving downward)
    porXdisp = porXdisp./pxPerDeg;
    porYdisp = porYdisp./pxPerDeg;
    
    porXdisp = smooth(porXdisp,3);
    porYdisp = smooth(porYdisp,3);
    
    %% %%% make sphere thingy fr eyeball guys
    sphRes = 20;
    r = 35;%mean(rEye.sphere_radius); %p.s. it's 12mm, but let's blow 'em up a bit for ... visibilitiy... 8D
    [th, phi] = meshgrid(linspace(0, 2*pi, sphRes), linspace(-pi, pi, sphRes));
    [x1,y1,z1] = sph2cart(th, phi, r);
    
    normScale = calibDist;
    plotSkel = true;
    
    lLeg = [2 3 4 5 6 7 5];
    rLeg = [2 8 9 10 11 12 10];
    tors = [2 13 14 15 26 27 28];
    lArm = [15 16 17 26 17 18 19 20];
    rArm = [15 21 22 26 22 23 24 25];
    
    comXYZ = squeeze(shadow_fr_mar_dim(:,1,:));
    
    
    frames = 1:length(comXYZ);
    
    % plot (hypothetical) groundplane
    
    xSpan = [min(rGazeGroundIntersection(frames,1))-1e5, max(rGazeGroundIntersection(frames,1))+1e5];
    zSpan = [min(rGazeGroundIntersection(frames,3))-1e5, max(rGazeGroundIntersection(frames,3))+1e5];
    
    
    res      = 100; % resultion for the meshgrid
    [groundPlane_x, groundPlane_z] = meshgrid(xSpan(1):res:xSpan(2), zSpan(1):res:zSpan(2));
    
    
    groundPlane_y = zeros(size(groundPlane_x));
    groundPlane_color = ones(size(groundPlane_x));
    
    
    
    close all
    figure(1254);clf
    f = gcf;
    f.Position = [1 41 1920 962];
    
    t = [];
    
    porWindow = 500; %the window of frames we'll use for the eye traces (i.e. the plot will show frame +/- porWindow)
    
    
    for fr = 1:frames(end)
        
        
        
        worldFr = worldFrameIndex(fr); %the frame in World.mp4 (30Hz) that corresponds to this 120Hz frame
        tic
        
        disp(strcat({'Fr#'},num2str(fr),{'-PROGRESS: '}, num2str(fr),'-of-',num2str(frames(end)),...
            '- time remaining ~',num2str((nanmean(t) * (length(frames)-fr))/60 ),'mins - Mean Frame Dur ~',num2str(nanmean(t)),...
            '- RecordVidset to:',num2str(recordVid)))
        
        
        clf
        
        
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %%% Plot Laser Skeleton
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        skel1 = axes;
        %     skel1.Position= [-.1, -.1 .5 2/3]; %room for div curl
        skel1.Position= [-.15, -.15 .5 2/3]; %room for div curl
        
        %%eyeball centers in shadow coordinats(not to be confused with "rEye_sphCen_x", which are in pupil camera coords)
        rEx = rEyeballCenterXYZ(fr,1);
        rEy = rEyeballCenterXYZ(fr,2);
        rEz = rEyeballCenterXYZ(fr,3);
        
        lEx = lEyeballCenterXYZ(fr,1);
        lEy = lEyeballCenterXYZ(fr,2);
        lEz = lEyeballCenterXYZ(fr,3);
        
        %     %%pull out the l and r eye sphere centers for this frame
        %     rCx = rEye_sphCenCam_x(ii);
        %     rCy = rEye_sphCenCam_y(ii);
        %     rCz = rEye_sphCenCam_z(ii);
        %
        %     lCx = lEye_sphCenCam_x(ii);
        %     lCy = lEye_sphCenCam_y(ii);
        %     lCz = lEye_sphCenCam_z(ii);
        %
        
        
        % right eye
        r1 =  mesh(x1+rEx, y1+rEy, z1+rEz);
        r1.FaceColor = [1 .9 .9];
        r1.EdgeColor = 'k';
        r1.EdgeAlpha = 0.1;
        hold on
        
        
        %     %%% Plot circular patch for pupil - centered on pupilNorm (code jacked from - https://www.mathworks.com/matlabcentral/fileexchange/26588-plot-circle-in-3d)
        %     thisRPupCenter = [rEye_pupCircCenXYZ(ii,1)-rCx rEye_pupCircCenXYZ(ii,2)-rCy rEye_pupCircCenXYZ(ii,3)-rCz] ;
        %     thisRPupNormal = thisRPupCenter*normScale;
        %     thisRPupRadius = rEye_pupRadius(ii);
        %
        %     if ~isnan(thisRPupNormal)
        %         theta=0:.1:2*pi;
        %         v=null(thisRPupNormal);
        %         points=repmat(thisRPupCenter',1,size(theta,2))+thisRPupRadius*(v(:,1)*cos(theta)+v(:,2)*sin(theta));
        %         patch(points(1,:)+rEx, points(2,:)+rEy, points(3,:)+rEz ,'r');
        %     end
        %%%%
        %
        %     plot3([0+rEx thisRPupCenter(1)+rEx],...
        %         [0+rEy thisRPupCenter(2)+rEy],...
        %         [0+rEz thisRPupCenter(3)+rEz],'k-','LineWidth',2)
        %
        %
        %     plot3([rEx thisRPupNormal(1)+rEx],...
        %         [rEy thisRPupNormal(2)+rEy],...
        %         [rEz thisRPupNormal(3)+rEz],'m-')
        %
        %     plot3([ thisRPupNormal(1)*normScale+rEx],...
        %         [ thisRPupNormal(2)*normScale+rEy],...
        %         [r thisRPupNormal(3)*normScale+rEz],'kp')
        
        plot3([rEx rGazeXYZ(fr,1)],...
            [rEy rGazeXYZ(fr,2)],...
            [rEz rGazeXYZ(fr,3)], 'm-','LineWidth',2)
        
        plot3(rGazeGroundIntersection(fr,1),...
            rGazeGroundIntersection(fr,2),...
            rGazeGroundIntersection(fr,3),'kp','MarkerFaceColor','r','MarkerSize',12)
        
        %     plot3(rGazeGroundIntersection(frames,1),...
        %         rGazeGroundIntersection(frames,2),...
        %         rGazeGroundIntersection(frames,3),'-r')
        
        
        % left eye
        l1 =  mesh(x1+lEx, y1+lEy, z1+lEz);
        l1.FaceColor = [.9 .9 1];
        l1.EdgeColor = 'none';
        
        hold on
        
        
        %     %%% Plot circular patch for pupil - centered on pupilNorm (code jacked from - https://www.mathworks.com/matlabcentral/fileexchange/26588-plot-circle-in-3d)
        %     thisLPupCenter = [lEye_pupCircCenXYZ(ii,1)-lCx lEye_pupCircCenXYZ(ii,2)-lCy lEye_pupCircCenXYZ(ii,3)-lCz] ;
        %     thisLPupNormal = thisLPupCenter*1.3;
        %     thisLPupRadius = lEye_pupRadius(ii);
        %
        %     if ~isnan(thisLPupNormal)
        %         theta=0:.1:2*pi;
        %         v=null(thisLPupNormal);
        %         points=repmat(thisLPupCenter',1,size(theta,2))+thisLPupRadius*(v(:,1)*cos(theta)+v(:,2)*sin(theta));
        %         patch(points(1,:)+lEx, points(2,:)+lEy, points(3,:)+lEz ,'b');
        %     end
        %     %%%%
        
        %     plot3([0+lEx thisLPupCenter(1)+lEx],...
        %         [0+lEy thisLPupCenter(2)+lEy],...
        %         [0+lEz thisLPupCenter(3)+lEz],'k-','LineWidth',2)
        %
        %
        %     plot3([lEx thisLPupNormal(1)*normScale+lEx],...
        %         [lEy thisLPupNormal(2)*normScale+lEy],...
        %         [lEz thisLPupNormal(3)*normScale+lEz],'c-','LineWidth',2)
        %
        %     plot3([thisLPupNormal(1)*normScale+lEx],...
        %         [thisLPupNormal(2)*normScale+lEy],...
        %         [thisLPupNormal(3)*normScale+lEz],'kp')
        
        plot3([lEx lGazeXYZ(fr,1)],...
            [lEy lGazeXYZ(fr,2)],...
            [lEz lGazeXYZ(fr,3)], 'c-','LineWidth',2)
        
        plot3(lGazeGroundIntersection(fr,1),...
            lGazeGroundIntersection(fr,2),...
            lGazeGroundIntersection(fr,3),'kp','MarkerFaceColor','b','MarkerSize',12)
        
        %     plot3(lGazeGroundIntersection(frames,1),...
        %         lGazeGroundIntersection(frames,2),...
        %         lGazeGroundIntersection(frames,3),'-b')
        
        
        if plotSkel
            %%%Plotcherself up a nice little skeleetoon friend
            plot3(shadow_fr_mar_dim(fr,1:28,1),shadow_fr_mar_dim(fr,1:28,2),shadow_fr_mar_dim(fr,1:28,3),'ko','MarkerFaceColor','k','MarkerSize',8)
            hold on
            
            
            plot3(shadow_fr_mar_dim(fr,lLeg,1),shadow_fr_mar_dim(fr,lLeg,2),shadow_fr_mar_dim(fr,lLeg,3),'c','LineWidth',4)
            plot3(shadow_fr_mar_dim(fr,rLeg,1),shadow_fr_mar_dim(fr,rLeg,2),shadow_fr_mar_dim(fr,rLeg,3),'r','LineWidth',4)
            plot3(shadow_fr_mar_dim(fr,tors,1),shadow_fr_mar_dim(fr,tors,2),shadow_fr_mar_dim(fr,tors,3),'g','LineWidth',4)
            plot3(shadow_fr_mar_dim(fr,lArm,1),shadow_fr_mar_dim(fr,lArm,2),shadow_fr_mar_dim(fr,lArm,3),'c','LineWidth',4)
            plot3(shadow_fr_mar_dim(fr,rArm,1),shadow_fr_mar_dim(fr,rArm,2),shadow_fr_mar_dim(fr,rArm,3),'r','LineWidth',4)
            
            %plot head axes
            hx = hCenXYZ(fr,1);
            hy = hCenXYZ(fr,2);
            hz = hCenXYZ(fr,3);
            
            %         plot3([hx headVecX_fr_xyz(fr,1)], [hy headVecX_fr_xyz(fr,2)], [hz headVecX_fr_xyz(fr,3)],'r.-','LineWidth',2)
            %         plot3([hx headVecY_fr_xyz(fr,1)], [hy headVecY_fr_xyz(fr,2)], [hz headVecY_fr_xyz(fr,3)],'g.-','LineWidth',2)
            %         plot3([hx headVecZ_fr_xyz(fr,1)], [hy headVecZ_fr_xyz(fr,2)], [hz headVecZ_fr_xyz(fr,3)],'c.-','LineWidth',2)
            
            headVecScale = 250;
            
            plot3([0 headVecX_fr_xyz(fr,1)*headVecScale]+hx, [0 headVecX_fr_xyz(fr,2)*headVecScale]+hy, [0 headVecX_fr_xyz(fr,3)*headVecScale]+hz,'r-','MarkerSize',3,'LineWidth',2)
            plot3([0 headVecY_fr_xyz(fr,1)*headVecScale]+hx, [0 headVecY_fr_xyz(fr,2)*headVecScale]+hy, [0 headVecY_fr_xyz(fr,3)*headVecScale]+hz,'g-','MarkerSize',3,'LineWidth',2)
            plot3([0 headVecZ_fr_xyz(fr,1)*headVecScale]+hx, [0 headVecZ_fr_xyz(fr,2)*headVecScale]+hy, [0 headVecZ_fr_xyz(fr,3)*headVecScale]+hz,'b-','MarkerSize',3,'LineWidth',2)
            
            
            bx =   shadow_fr_mar_dim(fr,1,1);
            by =   shadow_fr_mar_dim(fr,1,2);
            bz =   shadow_fr_mar_dim(fr,1,3);
            
            if ~strcmp(vidType,'Raw')
                %%% plot eye velocity vector
                velTraceLength = 20;
                ex = eyeXYZ(max([1 fr-velTraceLength]):fr,1);
                ey = eyeXYZ(max([1 fr-velTraceLength]):fr,2);
                ez = eyeXYZ(max([1 fr-velTraceLength]):fr,3);
                
                eyeVelScale = 100;
                evx = eyeVelXYZ(max([1 fr-velTraceLength]):fr,1)*eyeVelScale;
                evy = eyeVelXYZ(max([1 fr-velTraceLength]):fr,2)*eyeVelScale;
                evz = eyeVelXYZ(max([1 fr-velTraceLength]):fr,3)*eyeVelScale;
                
                ev1 = quiver3(ex(end), ey(end), ez(end), evx(end), evy(end), evz(end));
                ev1.Color = 'y';
                ev1.LineWidth = 3;
                
                
                plot3(ex+evx,ey+evy,ez+evz,'y-');
            end
            
            %%% plot foothold locations
            rFootholds = steps_HS_TO_StanceLeg_XYZ(steps_HS_TO_StanceLeg_XYZ(:,3) == 1 ,:);
            lFootholds = steps_HS_TO_StanceLeg_XYZ(steps_HS_TO_StanceLeg_XYZ(:,3) == 2 ,:);
            
            rFootholds(rFootholds(:,1)<fr-2000 | rFootholds(:,1)>fr+2000,:) = [];
            lFootholds(lFootholds(:,1)<fr-2000 | lFootholds(:,1)>fr+2000,:) = [];
            
            %   plot vertical projection of foothold locations onto groundplane
            
            plot3(rFootholds(:,4), zeros(length(rFootholds(:,1))), rFootholds(:,6),'ko','MarkerSize', 12, 'MarkerFaceColor','r')
            plot3(lFootholds(:,4), zeros(length(lFootholds(:,1))), lFootholds(:,6),'ko','MarkerSize', 12, 'MarkerFaceColor','c')
            
            
            %plot gaussianly burnt groundplane
            sigma = 7500;
            meanGazeGround = nanmean([lGazeGroundIntersection(fr,:); rGazeGroundIntersection(fr,:)]);
            gaussian        = 1./sqrt(2*pi*sigma).*exp(-1./(2*sigma).*( (groundPlane_z-meanGazeGround(3)).^2 + (groundPlane_x-meanGazeGround(1)).^2));
            gaussianNorm    = gaussian ./ max(max(gaussian));
            
            if ~isnan(gaussianNorm)
                groundPlane_color = groundPlane_color + gaussianNorm; %add 2d gaussian for this frame's gaze/ground intersection ground plane
            end
            
            %         g_x = meshgrid(-10e4:500:10e4) + comXYZ(ii,1);
            %         g_y = ones(size(g_x)) * min([rHeelXYZ(ii,2) lHeelXYZ(ii,2) ]);
            %         g_z = meshgrid(-10e4:500:10e4)' + comXYZ(ii,3);
            
            g1 = surface(groundPlane_x , groundPlane_y, groundPlane_z, groundPlane_color  );
            g1.LineStyle = 'none';
            g1.FaceColor = 'interp';
            
            %         CT = cbrewer('div', 'Spectral', 64);
            %         colormap(flipud(CT));
            colormap jet
            caxis([0 40])
            
        end
        %     view(-173, -43);
        axis equal
        %     title(num2str(fr))
        %     set(gca,'CameraUpVector',[0 1 0])
        %     xlabel('x');ylabel('y'); zlabel('z');
        %     axis([-5000+bx 5000+bx -5000+by 5000+by -5000+bz 5000+bz])
        
        a = gca;
        a.CameraTarget = [camComXYZ(fr,1), camComXYZ(fr,2), camComXYZ(fr,3)]; %point figure 'camera' at COM
        a.CameraPosition = a.CameraTarget + [-1800 1800 2000]; %set camera position
        a.CameraViewAngle = 80;
        a.CameraUpVector = [ 0 1 0];
        hold off
        
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %%%% Plot (nearest) frame from World Camera
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        world1 = axes;
        %     world1.Position = [.49 .35 .5 .65]; %room for div curl panels
        world1.Position = [.405 .335 .6 .65]; %big as possible
        
        worldVidObj.set(framePropID, worldFr-1); %set eye videos to the correct start frame
        thisFrameRaw = worldVidObj.read;
        
        if showOpticFlow || showStreamlines
            floH5 = h5read(flowH5path, ['/' num2str(worldFr)]);
            
            flowRaw = opticalFlow(squeeze(floH5(1,:,:))',squeeze(floH5(2,:,:))'); %use the Vx and Vy channels of the .flo file to make an optical flow object
            
        end
        
        
        imshow(thisFrameRaw)
        hold on
        
        if showOpticFlow
            plot(flowRaw,'DecimationFactor',[40 40],'ScaleFactor',4); %plot optic flow arrows
            h2 = findobj(gca,'Type','Quiver'); %pull out the assocated quiver object (in order to adjust appearance)
            h2.MaxHeadSize = .02;
            h2.LineWidth = 1.5;
            h2.Color = 'm';
            
            %         plot(FOExy(worldFr,1), FOExy(worldFr,2),'kp','MarkerFaceColor','y','MarkerSize',16);
            
        end
        
        if showStreamlines
            [gridxx, gridyy] = meshgrid(1:size(flowRaw.Vx,2), 1:size(flowRaw.Vx,1));
            vx = flowRaw.Vx;
            vy = flowRaw.Vy ;
            
            
            numGridPoints = 10;
            debug = false;
            [~, streamXY] = findFOE_rgb(gridxx, gridyy, vx, vy, numGridPoints, debug);
            
            s1=streamline(streamXY);
            
            for aa=1:length(s1) %alter streamline image
                
                s1(aa).Color = [0 0 0 ]+1;
                s1(aa).LineWidth = 1.5;
            end
            plot(FOExy(worldFr,1), FOExy(worldFr,2),'kp','MarkerFaceColor','y','MarkerSize',16);
            
        end
        
        % plot light white POR crosshairs for all data in porX and porY that we have for this world-camera-frame
        plot([porX(worldFrameIndex == worldFr) porX(worldFrameIndex == worldFr)], [0 height],'-w', 'LineWidth',.5)
        plot([0 width], [porY(worldFrameIndex == worldFr) porY(worldFrameIndex == worldFr)], '-w', 'LineWidth',.5)
        
        plot([porX(fr) porX(fr)], [0 height],'-k', 'LineWidth',2)
        plot([0 width], [porY(fr) porY(fr)], '-k', 'LineWidth',2)
        viscircles([porX(fr) porY(fr)],pxPerDeg,'Color','k','EnhanceVisibility',false);
        
        worldImTit1 = text(0,0,'Head Centered Video');
        worldImTit1.Position = [575, 1000];
        worldImTit1.FontSize = 28;
        worldImTit1.Color = 'w';
        worldImTit1.FontWeight = 'bold';
        
        % information about frame# etc
        infoTxt1 = text(0,0,[w.subID '_' w.takeID ' - Walk#', num2str(w.ww),' ' w.trialType ' - Data Frame: ' num2str(fr) '(' num2str(w.frames(fr)) ') - World Vid Frame: ' num2str(worldFr)]);
        infoTxt1.Position = [-1860 1815];
        infoTxt1.Interpreter = 'none';
        infoTxt1.FontSize = 15;
        infoTxt1.Color = 'w';
        
        
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %%%% Plot (nearest) frame from Retinal Reference Frame World camera video
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        if showRetinalVideo
            ret1 = axes;
            %         ret1.Position= [0.11 .45 .5 .5]; % room for div curl panels
            ret1.Position= [-.075 .4 .6 .6]; % room for div curl panels
            
            
            
            if showOpticFlow||showStreamlines
                retFloH5 = h5read(retFlowH5path, ['/' num2str(worldFr)]);
                
                retFlowRaw = opticalFlow(squeeze(retFloH5(1,:,:))',squeeze(retFloH5(2,:,:))'); %use the Vx and Vy channels of the .flo file to make an optical flow object
                
            end
            
            retVidObj.set(framePropID, worldFr-1); %set eye videos to the correct start frame
            thisRetFrameRaw = retVidObj.read;
            
            % Create a circluar mask
            [retGridxx, retGridyy] = meshgrid(1:size(thisRetFrameRaw,1), 1:size(thisRetFrameRaw,2));
            % Next create the circle in the image.
            center = size(thisRetFrameRaw,1)/2;
            radius = center*1.01; %mae radius slightly larger than it needs to be to give a nice black outline
            circleMask = (retGridxx - center).^2 + (retGridyy - center).^2 <= radius.^2;
            
            retIm1 = imshow(thisRetFrameRaw);
            retIm1.AlphaData = circleMask; %make outer square of image transparent
            
            hold on 
            
            if showOpticFlow
                plot(retFlowRaw,'DecimationFactor',[40 40],'ScaleFactor',4); %plot optic flow arrows
                h2 = findobj(gca,'Type','Quiver'); %pull out the assocated quiver object (in order to adjust appearance)
                h2.MaxHeadSize = .02;
                h2.LineWidth = 1.5;
                h2.Color = 'm';
            end
            
            if showStreamlines
                [gridxx, gridyy] = meshgrid(1:size(retFlowRaw.Vx,2), 1:size(retFlowRaw.Vx,1));
                retvx = retFlowRaw.Vx;
                retvy = retFlowRaw.Vy ;
                
                
                numGridPoints = 10;
                debug = false;
                [~, streamXY] = findFOE_rgb(gridxx, gridyy, retvx, retvy, numGridPoints, debug);
                
                s1=streamline(streamXY);
                
                for aa=1:length(s1) %alter streamline image
                    
                    s1(aa).Color = [0 0 0 ]+1;
                    s1(aa).LineWidth = 1.5;
                end
                
            end
            
            
            
            
            
            hold on
            
            
            plot([retWidth retWidth]/2, [0 height],'-k', 'LineWidth',3)
            plot([0 width], [retHeight retHeight]/2,'-k', 'LineWidth',3)
            
            plot([retWidth retWidth]/2, [0 height],'-w', 'LineWidth',1)
            plot([0 width], [retHeight retHeight]/2,'-w', 'LineWidth',1)
            viscircles([retWidth retHeight]/2,pxPerDeg,'Color','k','LineWidth',1,'EnhanceVisibility',false);
            
            
            retImTit1 = text(0,0,'Retina Centered Video');
            %         retImTit1.Position = [90, 1032]; %room for div curl
            retImTit1.Position = [180, 1015]; %room for div curl
            retImTit1.FontSize = 28;
            retImTit1.Color = 'w';
            retImTit1.FontWeight = 'bold';
            
        end
        
        
        
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %%%% Show Flow Magnitude histogram
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        showFlowMagHistogram = false;
        if showFlowMagHistogram
            flowMagHist1 = axes('Position',[0.4391 0.3709 0.1536 0.2102]);
            box on
            
            histogram(flowRaw.Magnitude(:),linspace(1,60,50),'Normalization','probability');
            hold on
            
            ylim([0 .25]);
            
            
            hold on
            
        end
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %%%%% show eyeballs  -> O_0 <-
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        
        eye0VidObj.set(1,eye0index(fr)-1); %set eye video to necessary frame. This is inefficient, but whatevs
        eye1VidObj.set(1,eye1index(fr)-1)
        
        imEye0 = eye0VidObj.read(); %right eye ->O_o
        
        imEye1 = eye1VidObj.read(); % left eye o_O<-
        
        eyeWidth = size(imEye0,2);
        eyeHeight = size(imEye0,1);
        
        ey1ax = axes;
        %     ey1ax.Position = [0.49 0.345 0.1 0.2486]; %room for div curl
        ey1ax.Position = [0.4155 0.304 0.125 0.2486]; %big as possible
        axis off
        imshow(fliplr(imEye1))
        hold on
        
        
        ey0ax = axes;
        %     ey0ax.Position = [0.89 0.345 0.1 0.2486]; %room for div curl
        ey0ax.Position = [0.87 0.304 0.125 0.2486]; %big as possible
        axis off
        imshow(flipud(imEye0))
        
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %%%% Plot POR/gaze traces
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        gzXAx = axes;
        %     gzXAx.Position = [0.49 0.263 0.50051 0.13]; %room for div curl
        gzXAx.Position = [0.43 0.20 0.5651 0.13]; %big as possible
        box on
        grid on
        
        plot(time, porXdisp,'ro-','LineWidth',1,'MarkerSize',1.5);
        hold on
        
        plot( time([ fr fr]), [1000 -1000],'k-','LineWidth',2)
        
        plot(time(fr), porXdisp(fr),'ko','MarkerFaceColor','w');
        
        currTime = time(fr);
        xmin = currTime - mean(diff(time))*porWindow;
        xmax = currTime + mean(diff(time))*porWindow;
        
        xlim([xmin xmax]);
        
        
        %     if strcmp(w.trialType, 'Free')
        ylim([-20 20]);
        gzXAx.YTick = [-15 -10 -5 0 5 10 15];
        gzXAx.YTickLabel = {[] -10 [] 0 [] 10 []};
        %     else
        %         ylim([-12 12]);
        %         set(gca, 'YTick', [-5 0 5]);
        %     end
        
        gzXlab1 = text(time(fr)-1.2,-13,'Horizontal Eye-in-Head Position');
        gzXlab1.FontSize = 16;
        gzXlab1.Color = 'k';
        gzXlab1.FontWeight = 'bold';
        
        gzXAx.FontSize = 11;
        for tt = 1:length(gzXAx.YTickLabel) %from - https://undocumentedmatlab.com/blog/customizing-axes-tick-labels
            gzXAx.YTickLabel{tt} = ['\color{white}' gzXAx.YTickLabel{tt}];
        end
        
        gzXAx.YLabel.String = 'Degrees';
        gzXAx.YLabel.Color = 'w';
        gzXAx.YLabel.FontSize = 12;
        gzXAx.YLabel.FontWeight = 'bold';
        grid on
        
        %%% gaze Y data
        
        gzYAx = axes;
        %     gzYAx.Position =  [0.49 0.1425 0.50051 0.13]; %room for div curl
        gzYAx.Position = [0.43 0.065 0.5651 0.13]; %big as possible
        box on
        
        plot(time, porYdisp,'bo-','LineWidth',1,'MarkerSize',1.5);
        hold on
        
        plot( time([ fr fr]), [1000 -13],'k-','LineWidth',2)
        
        plot(time(fr), porYdisp(fr),'ko','MarkerFaceColor','w');
        
        xlim([xmin xmax]);
        
        %     if strcmp(w.trialType, 'Free')
        ylim([-20 20]);
        gzYAx.YTick = [-15 -10 -5 0 5 10 15];
        gzYAx.YTickLabel = {[] -10 [] 0 [] 10 []};
        %     else
        %         ylim([-12 12]);
        %         set(gca, 'YTick', [-5 0 5]);
        %     end
        
        gzYlab1 = text(time(fr)-1.2,-15,'Vertical Eye-in-Head Position');
        gzYlab1.FontSize = 16;
        gzYlab1.Color = 'k';
        gzYlab1.FontWeight = 'bold';
        
        gzYAx.FontSize = 11;
        for tt = 1:length(gzYAx.YTickLabel) %from - https://undocumentedmatlab.com/blog/customizing-axes-tick-labels
            gzYAx.YTickLabel{tt} = ['\color{white}' gzYAx.YTickLabel{tt}];
        end
        for tt = 1:length(gzYAx.XTickLabel) %from - https://undocumentedmatlab.com/blog/customizing-axes-tick-labels
            gzYAx.XTickLabel{tt} = ['\color{white}' gzYAx.XTickLabel{tt}];
        end
        gzYAx.YLabel.String = 'Degrees';
        gzYAx.YLabel.Color = 'w';
        gzYAx.YLabel.FontSize = 12;
        gzYAx.YLabel.FontWeight = 'bold';
        
        gzYAx.XLabel.String = 'Time (sec)';
        gzYAx.XLabel.Color = 'w';
        gzYAx.XLabel.FontSize = 12;
        gzYAx.XLabel.FontWeight = 'bold';
        grid on
        
        
        
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %%%% Show Flow Magnitude trace
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%-.1
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        showFlowMagTrace = false;
        if showFlowMagTrace
            flowMagTrace1 = axes;
            flowMagTrace1.Position =  [0.49 0.045 0.50051 0.1];
            
            flowMagWindow = 250;
            box on
            
            plot(flowMagMean,'ko-','LineWidth',1,'MarkerSize',1.5);
            hold on
            
            plot( [ worldFr worldFr]+.3, [1000 -1000],'k-','LineWidth',2)
            
            plot(fr, flowMagMean(worldFr),'ko','MarkerFaceColor','w');
            
            plot([stepHS_worldFr stepHS_worldFr], [0 100],'r'); %show heelstrikes
            %             plot([stepTO_worldFr stepTO_worldFr], [0 100],'b'); %show heelstrikes
            
            xlim([worldFr-flowMagWindow worldFr+flowMagWindow]);
            ylim([10 35]);
            
            
            hold on
            
            %     set(gca, 'XTick', []);
            set(gca, 'YTick', [-5 0 5]);
            grid on
            
            
            flowMagTit1 = text(worldFr-50,5,'Optic Flow Mean Magnitude per Frame');
            flowMagTit1.FontSize = 16;
            flowMagTit1.FontWeight = 'bold';
            flowMagTit1.Color = 'w';
            
        end
        
        
        drawnow
        
        
        
        if recordVid
            thisFrame = getframe(gcf);
            writeVideo(vidObj,thisFrame);
            
        end
        
        t(fr-frames(1)+1) = toc;
        t(t==0) = nan;
    end
    
    %%
    if recordVid
        close(vidObj)
    end
end %iter